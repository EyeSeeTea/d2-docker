version: "3"
services:
    core:
        image: "${DHIS2_CORE_IMAGE}"
        labels:
            - "com.eyeseetea.image-name=${DHIS2_DATA_IMAGE}"
        volumes:
            - home:/DHIS2_home
            - ${DHIS_CONF}:/config/override/dhis2/dhis.conf
            - ./config:/config
            - data:/data
            - "${TOMCAT_SERVER}:/config/override/tomcat/server.xml"
            - "${SCRIPTS_DIR}:/data/scripts"
            - "${POST_SQL_DIR}:/data/db/post"
        environment:
            CATALINA_OPTS: "-Dcontext.path=${DEPLOY_PATH}"
            JAVA_OPTS: "-Xmx7500m -Xms4000m ${JAVA_OPTS}"
            LOAD_FROM_DATA: "${LOAD_FROM_DATA}"
            DEPLOY_PATH: "${DEPLOY_PATH}"
            DHIS2_AUTH: "${DHIS2_AUTH}"
        entrypoint: bash /config/dhis2-core-entrypoint.sh
        command: bash /config/dhis2-core-start.sh
        restart: unless-stopped
        depends_on:
            - "db"
    db:
        image: "postgis/postgis:${POSTGIS_VERSION:-14-3.2-alpine}"
        labels:
            - "com.eyeseetea.image-name=${DHIS2_DATA_IMAGE}"
        volumes:
            - pgdata:/var/lib/postgresql/data
        environment:
            POSTGRES_DB: dhis2
            POSTGRES_USER: dhis
            POSTGRES_PASSWORD: dhis
        command: "postgres -c max_locks_per_transaction=100 -c max_connections=200"
        restart: unless-stopped
        ports:
            - "${DB_PORT}"
    gateway:
        image: "jwilder/nginx-proxy:alpine"
        labels:
            - "com.eyeseetea.image-name=${DHIS2_DATA_IMAGE}"
            - "com.eyeseetea.deploy-path=${DEPLOY_PATH}"
        ports:
            - "${DHIS2_CORE_IP:-}${DHIS2_CORE_PORT:-8080}:80"
        volumes:
            - ./config/nginx.conf:/etc/nginx/nginx.conf:ro
            - ./config/50x.html:/usr/share/nginx/html/50x.html:ro
            - /var/run/docker.sock:/tmp/docker.sock:ro
        restart: unless-stopped
        depends_on:
            - "core"
    data:
        image: "${DHIS2_DATA_IMAGE}"
        environment:
            VOLUME: /volume-data
            LOAD_FROM_DATA: "${LOAD_FROM_DATA}"
        volumes:
            - data:/volume-data

volumes:
    pgdata:
    home:
    data:
    empty:
